/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.company.weather;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathExpressionException;
import org.xml.sax.SAXException;

/**
 *
 * @author George
 */
public class WeatherFrame extends javax.swing.JFrame {

    Forecast forecast;
    String[] iconStrings = {"sunny day",
        "partly cloudy (night)",
        "sunny intervals",
        "white medium level cloud",
        "black low level cloud",
        "light rain shower (night)",
        "light rain shower (day)",
        "drizzle",
        "light rain day or night",
        "heavy rain shower (night)",
        "heavy rain shower (day)",
        "heavy rain",
        "sleet shower (night)",
        "sleet shower (day)",
        "cloudy with sleet",
        "hail shower (night)",
        "hail shower (day)",
        "cloudy with hail",
        "light snow shower (night)",
        "light snow shower (day)",
        "cloudy with light snow",
        "heavy snow shower (night)",
        "heavy snow shower (day)",
        "cloudy with heavy snow",
        "thundery shower (night)",
        "thundery shower (day)",
        "thunderstorms"};

    /**
     * Creates new form WeatherFrame
     */
    public WeatherFrame() throws ParserConfigurationException, IOException, SAXException {
        initComponents();
        forecast = new Forecast();
    }
    
    /**
     * ICONS DO NOT WORK, CANNOT ACCESS AND READ THE IMAGES FROM RESOURCES
     */
    private void getIcon() {
        String weatherStatus = "Not available";
        jPanel1.removeAll();
        try {
            weatherStatus = forecast.weather.substring(forecast.weather.indexOf(": ") + 2, forecast.weather.indexOf(","));
            System.out.println("Weather phrase to find icon with: " + weatherStatus);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("LOG: Cannot find phrase to match an icon to.");
        };

        if (weatherStatus.equalsIgnoreCase("not available")) {
            weatherStatus = "Icon not available";
            System.out.println("LOG: " + weatherStatus);
        } else {
            String pathname = "weather_icons/" + weatherStatus.replaceAll(" ", "_") + ".png";
            System.out.println("Pathname: " + pathname);
            BufferedImage image = null;
            try {
                image = ImageIO.read(getClass().getResource(pathname));
            } catch (IOException e) {
                e.printStackTrace();
            }
            ImageIcon icon = new ImageIcon(image);
            imageLabel = new JLabel();
            imageLabel.setIcon(icon);
            jPanel1.add(imageLabel);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        urlTextInput = new javax.swing.JTextField();
        searchInputLabel = new javax.swing.JLabel();
        forecastButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        forecastDisplayTextPane = new javax.swing.JTextPane();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        locationLabel = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Weather Forecast Search");

        urlTextInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    urlTextInputActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        searchInputLabel.setText("Location Name:");

        forecastButton.setText("Forecast");
        forecastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    forecastButtonActionPerformed(evt);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        forecastDisplayTextPane.setEditable(false);
        forecastDisplayTextPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));
        forecastDisplayTextPane.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        forecastDisplayTextPane.setFocusable(false);
        forecastDisplayTextPane.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jScrollPane1.setViewportView(forecastDisplayTextPane);

        descriptionTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        descriptionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Temperature", null},
                {"Wind Direction", null},
                {"Wind Speed", null},
                {"Humidity", null},
                {"Pressure", null},
                {"Visibllity", null}
            },
            new String [] {
                "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        descriptionTable.setFocusable(false);
        descriptionTable.setRowHeight(20);
        descriptionTable.setRowSelectionAllowed(false);
        jScrollPane2.setViewportView(descriptionTable);

        jPanel1.setBackground(new java.awt.Color(130, 130, 130));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        locationLabel.setAlignment(java.awt.Label.CENTER);
        locationLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        locationLabel.setName("locationLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(50, 50, 50))
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(searchInputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addContainerGap(290, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(urlTextInput)
                .addGap(65, 65, 65)
                .addComponent(forecastButton)
                .addGap(50, 50, 50))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(locationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1))
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(searchInputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(urlTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(forecastButton))
                .addGap(33, 33, 33)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(locationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        searchInputLabel.getAccessibleContext().setAccessibleName("Search:");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void urlTextInputActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_urlTextInputActionPerformed
        forecastButtonActionPerformed(evt);
    }//GEN-LAST:event_urlTextInputActionPerformed

    private void forecastButtonActionPerformed(java.awt.event.ActionEvent evt) throws IOException {//GEN-FIRST:event_forecastButtonActionPerformed

        String query = urlTextInput.getText();

        try {
            forecast.getForecast(query);
        } catch (XPathExpressionException | IOException | SAXException | ParserConfigurationException ex) {
            Logger.getLogger(WeatherFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        locationLabel.setText(forecast.location);
        forecastDisplayTextPane.setText(forecast.weather);

        String[] description;
        if (!forecast.desc.equals("")) {
            description = forecast.desc.split(", ");
            description[4] = description[4] + ", " + description[5];
            description[5] = description[6];
            description[6] = null;

            int i = 0;
            for (String s : description) {
                if (i > 5) {
                    break;
                }
                descriptionTable.setValueAt(s.substring(s.indexOf(":")).substring(2), i, 1);
                i++;
            }            
        } else {
            for (int i = 0; i <= 5; i++) {
                descriptionTable.setValueAt("", i, 1);
            }
        }
        
        getIcon();

    }//GEN-LAST:event_forecastButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WeatherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WeatherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WeatherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WeatherFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new WeatherFrame().setVisible(true);
                } catch (ParserConfigurationException | IOException | SAXException ex) {
                    Logger.getLogger(WeatherFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable descriptionTable;
    private javax.swing.JButton forecastButton;
    private javax.swing.JTextPane forecastDisplayTextPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private java.awt.Label locationLabel;
    private javax.swing.JLabel searchInputLabel;
    private javax.swing.JTextField urlTextInput;
    private javax.swing.JLabel imageLabel;
    // End of variables declaration//GEN-END:variables
}
